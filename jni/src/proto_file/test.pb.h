// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto 

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2eproto
namespace MideaPb {
class DetectResult;
class DetectResultDefaultTypeInternal;
extern DetectResultDefaultTypeInternal _DetectResult_default_instance_;
class DetectResult_FaceResult;
class DetectResult_FaceResultDefaultTypeInternal;
extern DetectResult_FaceResultDefaultTypeInternal _DetectResult_FaceResult_default_instance_;
class DetectResult_ImgProperty;
class DetectResult_ImgPropertyDefaultTypeInternal;
extern DetectResult_ImgPropertyDefaultTypeInternal _DetectResult_ImgProperty_default_instance_;
class FaceList;
class FaceListDefaultTypeInternal;
extern FaceListDefaultTypeInternal _FaceList_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class QueryResponse_Group;
class QueryResponse_GroupDefaultTypeInternal;
extern QueryResponse_GroupDefaultTypeInternal _QueryResponse_Group_default_instance_;
class QueryResponse_Image;
class QueryResponse_ImageDefaultTypeInternal;
extern QueryResponse_ImageDefaultTypeInternal _QueryResponse_Image_default_instance_;
class QueryResponse_Person;
class QueryResponse_PersonDefaultTypeInternal;
extern QueryResponse_PersonDefaultTypeInternal _QueryResponse_Person_default_instance_;
}  // namespace MideaPb
namespace google {
namespace protobuf {
template<> ::MideaPb::DetectResult* Arena::CreateMaybeMessage<::MideaPb::DetectResult>(Arena*);
template<> ::MideaPb::DetectResult_FaceResult* Arena::CreateMaybeMessage<::MideaPb::DetectResult_FaceResult>(Arena*);
template<> ::MideaPb::DetectResult_ImgProperty* Arena::CreateMaybeMessage<::MideaPb::DetectResult_ImgProperty>(Arena*);
template<> ::MideaPb::FaceList* Arena::CreateMaybeMessage<::MideaPb::FaceList>(Arena*);
template<> ::MideaPb::QueryResponse* Arena::CreateMaybeMessage<::MideaPb::QueryResponse>(Arena*);
template<> ::MideaPb::QueryResponse_Group* Arena::CreateMaybeMessage<::MideaPb::QueryResponse_Group>(Arena*);
template<> ::MideaPb::QueryResponse_Image* Arena::CreateMaybeMessage<::MideaPb::QueryResponse_Image>(Arena*);
template<> ::MideaPb::QueryResponse_Person* Arena::CreateMaybeMessage<::MideaPb::QueryResponse_Person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace MideaPb {

// ===================================================================

class FaceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.FaceList) */ {
 public:
  FaceList();
  virtual ~FaceList();

  FaceList(const FaceList& from);

  inline FaceList& operator=(const FaceList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceList(FaceList&& from) noexcept
    : FaceList() {
    *this = ::std::move(from);
  }

  inline FaceList& operator=(FaceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceList* internal_default_instance() {
    return reinterpret_cast<const FaceList*>(
               &_FaceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FaceList* other);
  friend void swap(FaceList& a, FaceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceList* New() const final {
    return CreateMaybeMessage<FaceList>(NULL);
  }

  FaceList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaceList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaceList& from);
  void MergeFrom(const FaceList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 face_list = 1;
  int face_list_size() const;
  void clear_face_list();
  static const int kFaceListFieldNumber = 1;
  ::google::protobuf::int32 face_list(int index) const;
  void set_face_list(int index, ::google::protobuf::int32 value);
  void add_face_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      face_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_face_list();

  // @@protoc_insertion_point(class_scope:MideaPb.FaceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > face_list_;
  mutable int _face_list_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse_Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.QueryResponse.Image) */ {
 public:
  QueryResponse_Image();
  virtual ~QueryResponse_Image();

  QueryResponse_Image(const QueryResponse_Image& from);

  inline QueryResponse_Image& operator=(const QueryResponse_Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse_Image(QueryResponse_Image&& from) noexcept
    : QueryResponse_Image() {
    *this = ::std::move(from);
  }

  inline QueryResponse_Image& operator=(QueryResponse_Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse_Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse_Image* internal_default_instance() {
    return reinterpret_cast<const QueryResponse_Image*>(
               &_QueryResponse_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QueryResponse_Image* other);
  friend void swap(QueryResponse_Image& a, QueryResponse_Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse_Image* New() const final {
    return CreateMaybeMessage<QueryResponse_Image>(NULL);
  }

  QueryResponse_Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse_Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse_Image& from);
  void MergeFrom(const QueryResponse_Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse_Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_name = 1;
  void clear_image_name();
  static const int kImageNameFieldNumber = 1;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  #if LANG_CXX11
  void set_image_name(::std::string&& value);
  #endif
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);

  // @@protoc_insertion_point(class_scope:MideaPb.QueryResponse.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse_Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.QueryResponse.Person) */ {
 public:
  QueryResponse_Person();
  virtual ~QueryResponse_Person();

  QueryResponse_Person(const QueryResponse_Person& from);

  inline QueryResponse_Person& operator=(const QueryResponse_Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse_Person(QueryResponse_Person&& from) noexcept
    : QueryResponse_Person() {
    *this = ::std::move(from);
  }

  inline QueryResponse_Person& operator=(QueryResponse_Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse_Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse_Person* internal_default_instance() {
    return reinterpret_cast<const QueryResponse_Person*>(
               &_QueryResponse_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QueryResponse_Person* other);
  friend void swap(QueryResponse_Person& a, QueryResponse_Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse_Person* New() const final {
    return CreateMaybeMessage<QueryResponse_Person>(NULL);
  }

  QueryResponse_Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse_Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse_Person& from);
  void MergeFrom(const QueryResponse_Person& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse_Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MideaPb.QueryResponse.Image image_list = 2;
  int image_list_size() const;
  void clear_image_list();
  static const int kImageListFieldNumber = 2;
  ::MideaPb::QueryResponse_Image* mutable_image_list(int index);
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Image >*
      mutable_image_list();
  const ::MideaPb::QueryResponse_Image& image_list(int index) const;
  ::MideaPb::QueryResponse_Image* add_image_list();
  const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Image >&
      image_list() const;

  // string person_name = 1;
  void clear_person_name();
  static const int kPersonNameFieldNumber = 1;
  const ::std::string& person_name() const;
  void set_person_name(const ::std::string& value);
  #if LANG_CXX11
  void set_person_name(::std::string&& value);
  #endif
  void set_person_name(const char* value);
  void set_person_name(const char* value, size_t size);
  ::std::string* mutable_person_name();
  ::std::string* release_person_name();
  void set_allocated_person_name(::std::string* person_name);

  // @@protoc_insertion_point(class_scope:MideaPb.QueryResponse.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Image > image_list_;
  ::google::protobuf::internal::ArenaStringPtr person_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse_Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.QueryResponse.Group) */ {
 public:
  QueryResponse_Group();
  virtual ~QueryResponse_Group();

  QueryResponse_Group(const QueryResponse_Group& from);

  inline QueryResponse_Group& operator=(const QueryResponse_Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse_Group(QueryResponse_Group&& from) noexcept
    : QueryResponse_Group() {
    *this = ::std::move(from);
  }

  inline QueryResponse_Group& operator=(QueryResponse_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse_Group* internal_default_instance() {
    return reinterpret_cast<const QueryResponse_Group*>(
               &_QueryResponse_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(QueryResponse_Group* other);
  friend void swap(QueryResponse_Group& a, QueryResponse_Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse_Group* New() const final {
    return CreateMaybeMessage<QueryResponse_Group>(NULL);
  }

  QueryResponse_Group* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse_Group>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse_Group& from);
  void MergeFrom(const QueryResponse_Group& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse_Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MideaPb.QueryResponse.Person person_list = 2;
  int person_list_size() const;
  void clear_person_list();
  static const int kPersonListFieldNumber = 2;
  ::MideaPb::QueryResponse_Person* mutable_person_list(int index);
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Person >*
      mutable_person_list();
  const ::MideaPb::QueryResponse_Person& person_list(int index) const;
  ::MideaPb::QueryResponse_Person* add_person_list();
  const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Person >&
      person_list() const;

  // string group_name = 1;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 1;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:MideaPb.QueryResponse.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Person > person_list_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(NULL);
  }

  QueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QueryResponse_Image Image;
  typedef QueryResponse_Person Person;
  typedef QueryResponse_Group Group;

  // accessors -------------------------------------------------------

  // repeated .MideaPb.QueryResponse.Group list = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  ::MideaPb::QueryResponse_Group* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Group >*
      mutable_list();
  const ::MideaPb::QueryResponse_Group& list(int index) const;
  ::MideaPb::QueryResponse_Group* add_list();
  const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Group >&
      list() const;

  // string act = 1;
  void clear_act();
  static const int kActFieldNumber = 1;
  const ::std::string& act() const;
  void set_act(const ::std::string& value);
  #if LANG_CXX11
  void set_act(::std::string&& value);
  #endif
  void set_act(const char* value);
  void set_act(const char* value, size_t size);
  ::std::string* mutable_act();
  ::std::string* release_act();
  void set_allocated_act(::std::string* act);

  // @@protoc_insertion_point(class_scope:MideaPb.QueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Group > list_;
  ::google::protobuf::internal::ArenaStringPtr act_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectResult_ImgProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.DetectResult.ImgProperty) */ {
 public:
  DetectResult_ImgProperty();
  virtual ~DetectResult_ImgProperty();

  DetectResult_ImgProperty(const DetectResult_ImgProperty& from);

  inline DetectResult_ImgProperty& operator=(const DetectResult_ImgProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectResult_ImgProperty(DetectResult_ImgProperty&& from) noexcept
    : DetectResult_ImgProperty() {
    *this = ::std::move(from);
  }

  inline DetectResult_ImgProperty& operator=(DetectResult_ImgProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectResult_ImgProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectResult_ImgProperty* internal_default_instance() {
    return reinterpret_cast<const DetectResult_ImgProperty*>(
               &_DetectResult_ImgProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DetectResult_ImgProperty* other);
  friend void swap(DetectResult_ImgProperty& a, DetectResult_ImgProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResult_ImgProperty* New() const final {
    return CreateMaybeMessage<DetectResult_ImgProperty>(NULL);
  }

  DetectResult_ImgProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectResult_ImgProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectResult_ImgProperty& from);
  void MergeFrom(const DetectResult_ImgProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult_ImgProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double luminance = 1;
  void clear_luminance();
  static const int kLuminanceFieldNumber = 1;
  double luminance() const;
  void set_luminance(double value);

  // @@protoc_insertion_point(class_scope:MideaPb.DetectResult.ImgProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double luminance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectResult_FaceResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.DetectResult.FaceResult) */ {
 public:
  DetectResult_FaceResult();
  virtual ~DetectResult_FaceResult();

  DetectResult_FaceResult(const DetectResult_FaceResult& from);

  inline DetectResult_FaceResult& operator=(const DetectResult_FaceResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectResult_FaceResult(DetectResult_FaceResult&& from) noexcept
    : DetectResult_FaceResult() {
    *this = ::std::move(from);
  }

  inline DetectResult_FaceResult& operator=(DetectResult_FaceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectResult_FaceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectResult_FaceResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult_FaceResult*>(
               &_DetectResult_FaceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DetectResult_FaceResult* other);
  friend void swap(DetectResult_FaceResult& a, DetectResult_FaceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResult_FaceResult* New() const final {
    return CreateMaybeMessage<DetectResult_FaceResult>(NULL);
  }

  DetectResult_FaceResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectResult_FaceResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectResult_FaceResult& from);
  void MergeFrom(const DetectResult_FaceResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult_FaceResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 person_id = 1;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 1;
  ::google::protobuf::int32 person_id() const;
  void set_person_id(::google::protobuf::int32 value);

  // int32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // int32 top = 3;
  void clear_top();
  static const int kTopFieldNumber = 3;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // int32 right = 4;
  void clear_right();
  static const int kRightFieldNumber = 4;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // int32 bottom = 5;
  void clear_bottom();
  static const int kBottomFieldNumber = 5;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // int32 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double confidence = 7;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 7;
  double confidence() const;
  void set_confidence(double value);

  // double liveness = 8;
  void clear_liveness();
  static const int kLivenessFieldNumber = 8;
  double liveness() const;
  void set_liveness(double value);

  // @@protoc_insertion_point(class_scope:MideaPb.DetectResult.FaceResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 person_id_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::int32 type_;
  double confidence_;
  double liveness_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MideaPb.DetectResult) */ {
 public:
  DetectResult();
  virtual ~DetectResult();

  DetectResult(const DetectResult& from);

  inline DetectResult& operator=(const DetectResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectResult(DetectResult&& from) noexcept
    : DetectResult() {
    *this = ::std::move(from);
  }

  inline DetectResult& operator=(DetectResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult*>(
               &_DetectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DetectResult* other);
  friend void swap(DetectResult& a, DetectResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectResult* New() const final {
    return CreateMaybeMessage<DetectResult>(NULL);
  }

  DetectResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectResult& from);
  void MergeFrom(const DetectResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DetectResult_ImgProperty ImgProperty;
  typedef DetectResult_FaceResult FaceResult;

  // accessors -------------------------------------------------------

  // repeated .MideaPb.DetectResult.FaceResult face_result = 2;
  int face_result_size() const;
  void clear_face_result();
  static const int kFaceResultFieldNumber = 2;
  ::MideaPb::DetectResult_FaceResult* mutable_face_result(int index);
  ::google::protobuf::RepeatedPtrField< ::MideaPb::DetectResult_FaceResult >*
      mutable_face_result();
  const ::MideaPb::DetectResult_FaceResult& face_result(int index) const;
  ::MideaPb::DetectResult_FaceResult* add_face_result();
  const ::google::protobuf::RepeatedPtrField< ::MideaPb::DetectResult_FaceResult >&
      face_result() const;

  // .MideaPb.DetectResult.ImgProperty img_property = 1;
  bool has_img_property() const;
  void clear_img_property();
  static const int kImgPropertyFieldNumber = 1;
  private:
  const ::MideaPb::DetectResult_ImgProperty& _internal_img_property() const;
  public:
  const ::MideaPb::DetectResult_ImgProperty& img_property() const;
  ::MideaPb::DetectResult_ImgProperty* release_img_property();
  ::MideaPb::DetectResult_ImgProperty* mutable_img_property();
  void set_allocated_img_property(::MideaPb::DetectResult_ImgProperty* img_property);

  // @@protoc_insertion_point(class_scope:MideaPb.DetectResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MideaPb::DetectResult_FaceResult > face_result_;
  ::MideaPb::DetectResult_ImgProperty* img_property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaceList

// repeated int32 face_list = 1;
inline int FaceList::face_list_size() const {
  return face_list_.size();
}
inline void FaceList::clear_face_list() {
  face_list_.Clear();
}
inline ::google::protobuf::int32 FaceList::face_list(int index) const {
  // @@protoc_insertion_point(field_get:MideaPb.FaceList.face_list)
  return face_list_.Get(index);
}
inline void FaceList::set_face_list(int index, ::google::protobuf::int32 value) {
  face_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:MideaPb.FaceList.face_list)
}
inline void FaceList::add_face_list(::google::protobuf::int32 value) {
  face_list_.Add(value);
  // @@protoc_insertion_point(field_add:MideaPb.FaceList.face_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FaceList::face_list() const {
  // @@protoc_insertion_point(field_list:MideaPb.FaceList.face_list)
  return face_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FaceList::mutable_face_list() {
  // @@protoc_insertion_point(field_mutable_list:MideaPb.FaceList.face_list)
  return &face_list_;
}

// -------------------------------------------------------------------

// QueryResponse_Image

// string image_name = 1;
inline void QueryResponse_Image::clear_image_name() {
  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResponse_Image::image_name() const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.Image.image_name)
  return image_name_.GetNoArena();
}
inline void QueryResponse_Image::set_image_name(const ::std::string& value) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MideaPb.QueryResponse.Image.image_name)
}
#if LANG_CXX11
inline void QueryResponse_Image::set_image_name(::std::string&& value) {
  
  image_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MideaPb.QueryResponse.Image.image_name)
}
#endif
inline void QueryResponse_Image::set_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MideaPb.QueryResponse.Image.image_name)
}
inline void QueryResponse_Image::set_image_name(const char* value, size_t size) {
  
  image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MideaPb.QueryResponse.Image.image_name)
}
inline ::std::string* QueryResponse_Image::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.Image.image_name)
  return image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse_Image::release_image_name() {
  // @@protoc_insertion_point(field_release:MideaPb.QueryResponse.Image.image_name)
  
  return image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse_Image::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name);
  // @@protoc_insertion_point(field_set_allocated:MideaPb.QueryResponse.Image.image_name)
}

// -------------------------------------------------------------------

// QueryResponse_Person

// string person_name = 1;
inline void QueryResponse_Person::clear_person_name() {
  person_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResponse_Person::person_name() const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.Person.person_name)
  return person_name_.GetNoArena();
}
inline void QueryResponse_Person::set_person_name(const ::std::string& value) {
  
  person_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MideaPb.QueryResponse.Person.person_name)
}
#if LANG_CXX11
inline void QueryResponse_Person::set_person_name(::std::string&& value) {
  
  person_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MideaPb.QueryResponse.Person.person_name)
}
#endif
inline void QueryResponse_Person::set_person_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  person_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MideaPb.QueryResponse.Person.person_name)
}
inline void QueryResponse_Person::set_person_name(const char* value, size_t size) {
  
  person_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MideaPb.QueryResponse.Person.person_name)
}
inline ::std::string* QueryResponse_Person::mutable_person_name() {
  
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.Person.person_name)
  return person_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse_Person::release_person_name() {
  // @@protoc_insertion_point(field_release:MideaPb.QueryResponse.Person.person_name)
  
  return person_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse_Person::set_allocated_person_name(::std::string* person_name) {
  if (person_name != NULL) {
    
  } else {
    
  }
  person_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), person_name);
  // @@protoc_insertion_point(field_set_allocated:MideaPb.QueryResponse.Person.person_name)
}

// repeated .MideaPb.QueryResponse.Image image_list = 2;
inline int QueryResponse_Person::image_list_size() const {
  return image_list_.size();
}
inline void QueryResponse_Person::clear_image_list() {
  image_list_.Clear();
}
inline ::MideaPb::QueryResponse_Image* QueryResponse_Person::mutable_image_list(int index) {
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.Person.image_list)
  return image_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Image >*
QueryResponse_Person::mutable_image_list() {
  // @@protoc_insertion_point(field_mutable_list:MideaPb.QueryResponse.Person.image_list)
  return &image_list_;
}
inline const ::MideaPb::QueryResponse_Image& QueryResponse_Person::image_list(int index) const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.Person.image_list)
  return image_list_.Get(index);
}
inline ::MideaPb::QueryResponse_Image* QueryResponse_Person::add_image_list() {
  // @@protoc_insertion_point(field_add:MideaPb.QueryResponse.Person.image_list)
  return image_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Image >&
QueryResponse_Person::image_list() const {
  // @@protoc_insertion_point(field_list:MideaPb.QueryResponse.Person.image_list)
  return image_list_;
}

// -------------------------------------------------------------------

// QueryResponse_Group

// string group_name = 1;
inline void QueryResponse_Group::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResponse_Group::group_name() const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.Group.group_name)
  return group_name_.GetNoArena();
}
inline void QueryResponse_Group::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MideaPb.QueryResponse.Group.group_name)
}
#if LANG_CXX11
inline void QueryResponse_Group::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MideaPb.QueryResponse.Group.group_name)
}
#endif
inline void QueryResponse_Group::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MideaPb.QueryResponse.Group.group_name)
}
inline void QueryResponse_Group::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MideaPb.QueryResponse.Group.group_name)
}
inline ::std::string* QueryResponse_Group::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.Group.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse_Group::release_group_name() {
  // @@protoc_insertion_point(field_release:MideaPb.QueryResponse.Group.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse_Group::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:MideaPb.QueryResponse.Group.group_name)
}

// repeated .MideaPb.QueryResponse.Person person_list = 2;
inline int QueryResponse_Group::person_list_size() const {
  return person_list_.size();
}
inline void QueryResponse_Group::clear_person_list() {
  person_list_.Clear();
}
inline ::MideaPb::QueryResponse_Person* QueryResponse_Group::mutable_person_list(int index) {
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.Group.person_list)
  return person_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Person >*
QueryResponse_Group::mutable_person_list() {
  // @@protoc_insertion_point(field_mutable_list:MideaPb.QueryResponse.Group.person_list)
  return &person_list_;
}
inline const ::MideaPb::QueryResponse_Person& QueryResponse_Group::person_list(int index) const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.Group.person_list)
  return person_list_.Get(index);
}
inline ::MideaPb::QueryResponse_Person* QueryResponse_Group::add_person_list() {
  // @@protoc_insertion_point(field_add:MideaPb.QueryResponse.Group.person_list)
  return person_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Person >&
QueryResponse_Group::person_list() const {
  // @@protoc_insertion_point(field_list:MideaPb.QueryResponse.Group.person_list)
  return person_list_;
}

// -------------------------------------------------------------------

// QueryResponse

// string act = 1;
inline void QueryResponse::clear_act() {
  act_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResponse::act() const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.act)
  return act_.GetNoArena();
}
inline void QueryResponse::set_act(const ::std::string& value) {
  
  act_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MideaPb.QueryResponse.act)
}
#if LANG_CXX11
inline void QueryResponse::set_act(::std::string&& value) {
  
  act_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MideaPb.QueryResponse.act)
}
#endif
inline void QueryResponse::set_act(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  act_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MideaPb.QueryResponse.act)
}
inline void QueryResponse::set_act(const char* value, size_t size) {
  
  act_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MideaPb.QueryResponse.act)
}
inline ::std::string* QueryResponse::mutable_act() {
  
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.act)
  return act_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse::release_act() {
  // @@protoc_insertion_point(field_release:MideaPb.QueryResponse.act)
  
  return act_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_act(::std::string* act) {
  if (act != NULL) {
    
  } else {
    
  }
  act_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), act);
  // @@protoc_insertion_point(field_set_allocated:MideaPb.QueryResponse.act)
}

// repeated .MideaPb.QueryResponse.Group list = 2;
inline int QueryResponse::list_size() const {
  return list_.size();
}
inline void QueryResponse::clear_list() {
  list_.Clear();
}
inline ::MideaPb::QueryResponse_Group* QueryResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:MideaPb.QueryResponse.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Group >*
QueryResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:MideaPb.QueryResponse.list)
  return &list_;
}
inline const ::MideaPb::QueryResponse_Group& QueryResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:MideaPb.QueryResponse.list)
  return list_.Get(index);
}
inline ::MideaPb::QueryResponse_Group* QueryResponse::add_list() {
  // @@protoc_insertion_point(field_add:MideaPb.QueryResponse.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MideaPb::QueryResponse_Group >&
QueryResponse::list() const {
  // @@protoc_insertion_point(field_list:MideaPb.QueryResponse.list)
  return list_;
}

// -------------------------------------------------------------------

// DetectResult_ImgProperty

// double luminance = 1;
inline void DetectResult_ImgProperty::clear_luminance() {
  luminance_ = 0;
}
inline double DetectResult_ImgProperty::luminance() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.ImgProperty.luminance)
  return luminance_;
}
inline void DetectResult_ImgProperty::set_luminance(double value) {
  
  luminance_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.ImgProperty.luminance)
}

// -------------------------------------------------------------------

// DetectResult_FaceResult

// int32 person_id = 1;
inline void DetectResult_FaceResult::clear_person_id() {
  person_id_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::person_id() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.person_id)
  return person_id_;
}
inline void DetectResult_FaceResult::set_person_id(::google::protobuf::int32 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.person_id)
}

// int32 left = 2;
inline void DetectResult_FaceResult::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::left() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.left)
  return left_;
}
inline void DetectResult_FaceResult::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.left)
}

// int32 top = 3;
inline void DetectResult_FaceResult::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::top() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.top)
  return top_;
}
inline void DetectResult_FaceResult::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.top)
}

// int32 right = 4;
inline void DetectResult_FaceResult::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::right() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.right)
  return right_;
}
inline void DetectResult_FaceResult::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.right)
}

// int32 bottom = 5;
inline void DetectResult_FaceResult::clear_bottom() {
  bottom_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::bottom() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.bottom)
  return bottom_;
}
inline void DetectResult_FaceResult::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.bottom)
}

// int32 type = 6;
inline void DetectResult_FaceResult::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 DetectResult_FaceResult::type() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.type)
  return type_;
}
inline void DetectResult_FaceResult::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.type)
}

// double confidence = 7;
inline void DetectResult_FaceResult::clear_confidence() {
  confidence_ = 0;
}
inline double DetectResult_FaceResult::confidence() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.confidence)
  return confidence_;
}
inline void DetectResult_FaceResult::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.confidence)
}

// double liveness = 8;
inline void DetectResult_FaceResult::clear_liveness() {
  liveness_ = 0;
}
inline double DetectResult_FaceResult::liveness() const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.FaceResult.liveness)
  return liveness_;
}
inline void DetectResult_FaceResult::set_liveness(double value) {
  
  liveness_ = value;
  // @@protoc_insertion_point(field_set:MideaPb.DetectResult.FaceResult.liveness)
}

// -------------------------------------------------------------------

// DetectResult

// .MideaPb.DetectResult.ImgProperty img_property = 1;
inline bool DetectResult::has_img_property() const {
  return this != internal_default_instance() && img_property_ != NULL;
}
inline void DetectResult::clear_img_property() {
  if (GetArenaNoVirtual() == NULL && img_property_ != NULL) {
    delete img_property_;
  }
  img_property_ = NULL;
}
inline const ::MideaPb::DetectResult_ImgProperty& DetectResult::_internal_img_property() const {
  return *img_property_;
}
inline const ::MideaPb::DetectResult_ImgProperty& DetectResult::img_property() const {
  const ::MideaPb::DetectResult_ImgProperty* p = img_property_;
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.img_property)
  return p != NULL ? *p : *reinterpret_cast<const ::MideaPb::DetectResult_ImgProperty*>(
      &::MideaPb::_DetectResult_ImgProperty_default_instance_);
}
inline ::MideaPb::DetectResult_ImgProperty* DetectResult::release_img_property() {
  // @@protoc_insertion_point(field_release:MideaPb.DetectResult.img_property)
  
  ::MideaPb::DetectResult_ImgProperty* temp = img_property_;
  img_property_ = NULL;
  return temp;
}
inline ::MideaPb::DetectResult_ImgProperty* DetectResult::mutable_img_property() {
  
  if (img_property_ == NULL) {
    auto* p = CreateMaybeMessage<::MideaPb::DetectResult_ImgProperty>(GetArenaNoVirtual());
    img_property_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MideaPb.DetectResult.img_property)
  return img_property_;
}
inline void DetectResult::set_allocated_img_property(::MideaPb::DetectResult_ImgProperty* img_property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete img_property_;
  }
  if (img_property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_property, submessage_arena);
    }
    
  } else {
    
  }
  img_property_ = img_property;
  // @@protoc_insertion_point(field_set_allocated:MideaPb.DetectResult.img_property)
}

// repeated .MideaPb.DetectResult.FaceResult face_result = 2;
inline int DetectResult::face_result_size() const {
  return face_result_.size();
}
inline void DetectResult::clear_face_result() {
  face_result_.Clear();
}
inline ::MideaPb::DetectResult_FaceResult* DetectResult::mutable_face_result(int index) {
  // @@protoc_insertion_point(field_mutable:MideaPb.DetectResult.face_result)
  return face_result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MideaPb::DetectResult_FaceResult >*
DetectResult::mutable_face_result() {
  // @@protoc_insertion_point(field_mutable_list:MideaPb.DetectResult.face_result)
  return &face_result_;
}
inline const ::MideaPb::DetectResult_FaceResult& DetectResult::face_result(int index) const {
  // @@protoc_insertion_point(field_get:MideaPb.DetectResult.face_result)
  return face_result_.Get(index);
}
inline ::MideaPb::DetectResult_FaceResult* DetectResult::add_face_result() {
  // @@protoc_insertion_point(field_add:MideaPb.DetectResult.face_result)
  return face_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MideaPb::DetectResult_FaceResult >&
DetectResult::face_result() const {
  // @@protoc_insertion_point(field_list:MideaPb.DetectResult.face_result)
  return face_result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MideaPb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2eproto
